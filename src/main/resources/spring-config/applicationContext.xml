<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <description>spring configuration file</description>
    <!-- 开启注解扫描-->
    <context:component-scan base-package="com.maven">
        <!-- springmvc已配置注解扫码controller,现在spring配置文件设置type=regex不扫码Controller包;是否生效未测试-->
<!--        <context:exclude-filter type="regex" expression="com\.maven\.Controller"/>-->
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
<!--    <import resource="classpath:spring-config/spring-aop.xml" />-->

    <!-- 读取数据库配置信息 建议加classpath，否则可能找不到对应配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 配置数据源-->
<!--    destroy-method=”close”的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
    </bean>

    <!-- 配置spring事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 开启事务注解扫描 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- MyBatis与Spring整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源-->
        <property name="dataSource" ref="dataSource" />
        <!-- 指定mapper映射文件位置-->
        <property name="mapperLocations" value="classpath:Mapper/*.xml" />
        <!-- 指定Mybatis核心配置文件位置-->
        <property name="configLocation" value="classpath:mybatis-config/mybatis-config.xml" />
        <!-- 引入插件 -->
<!--        <property name="plugins">-->
<!--            <array>-->
<!--                &lt;!&ndash; 引入MyBaits分页插件 &ndash;&gt;-->
<!--                <bean class="com.github.pagehelper.PageInterceptor">-->
<!--                    <property name="properties">-->
<!--                        &lt;!&ndash; 指定数据库类型 &ndash;&gt;-->
<!--                        <value>helperDialct=mysql</value>-->
<!--                    </property>-->
<!--                </bean>-->
<!--            </array>-->
<!--        </property>-->
    </bean>

    <!-- 开启Mapper接口扫描器: 扫描Dao层 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.maven.Mapper"/>
        <!-- 通过sqlSessionFactoryBeanName的String类型加载，避免初始话mybatis时jdbc.properties未加载导致的异常
             有多个sqlSessionFactory时就需要指明使用哪个，如果只有一个可以不
        -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置文件上传解析器,id是固定的-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
</beans>